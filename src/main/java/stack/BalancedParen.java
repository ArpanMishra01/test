package stack;import java.util.*;public class BalancedParen {    private static final Map<Character, Character> inputParen = new HashMap<Character, Character>();    private static final Set<Character> openingParenSet = new HashSet<Character>();    static {        inputParen.put(')', '(');        inputParen.put('}', '{');        inputParen.put(']', '[');        openingParenSet.addAll(inputParen.values());    }    public static void main(String[] args) throws Exception{        Scanner sc = new Scanner(System.in);        String input = sc.nextLine();        System.out.println(isBalancedParen(input));    }    public static boolean isBalancedParen(String input) throws Exception{        if(input == null){            throw new Exception();        }        Stack<Character> checkParen = new Stack<Character>();        for (int i = 0; i < input.length(); i++) {            if (openingParenSet.contains(input.charAt(i))) {                try {                    checkParen.push(input.charAt(i));                } catch (StackOverflowError e) {                    throw new StackOverflowError();                }            }            if (inputParen.containsKey(input.charAt(i)) && checkParen.peek().equals(inputParen.get(input.charAt(i)))) {                checkParen.pop();            }            if (checkParen.isEmpty()) {                return true;            }        }        return false;    }}